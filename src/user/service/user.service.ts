import { PageDto } from './../../request/page.dto';
import { Article } from 'src/article/entities/article.entity';
import { Feature } from 'src/feature/entities/feature.entity';
import { HttpException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from '../entities/user.entity';
import { Repository } from 'typeorm';
import { UserUpdateDto } from '../dto/req-user.dto';
import { ResponseData } from 'src/request/response-data';
import { BlackList } from '../entities/blacklist.entity';

@Injectable()
export class UserService {
    blackSet = new Set<number>();

    constructor(
        @InjectRepository(User)
        private userRepository: Repository<User>,
        @InjectRepository(BlackList)
        private blackRepository: Repository<BlackList>,
        @InjectRepository(Feature)
        private featureRepository: Repository<Feature>,
        @InjectRepository(Article)
        private articleRepository: Repository<Article>,
    ) {
        this.initBlackList();
    }

    queryUserById(id: number) {
        return this.userRepository.findOneBy({ id });
    }

    async findUser(id: number) {
        //nestÁöÑÊü•ËØ¢ËØ≠Âè•ÔºåËøôÂè•ÊÑèÊÄùÂíå findOne ‰∏ÄÊ†∑ÔºåÊ†πÊçÆË°®ÂΩì‰∏≠ÁöÑÊüê‰∏™Â≠óÊÆµËé∑Âèñ‰∏Ä‰∏™
        let user = await this.userRepository.findOneBy({ id });
        //ÂèØ‰ª•ÈÄöËøáfindÁ≥ªÂàóËé∑ÂèñÂ§ö‰∏™ÔºåÈÇ£Êó∂ÈúÄË¶Å‰ª£Á†ÅÂíåÊï∞Èáè‰∫Ü
        if (!user) {
            // throw new HttpException('Ê≤°ÊâæÂà∞Áî®Êà∑', 204)
            return ResponseData.fail('ËØ•Áî®Êà∑‰∏çÂ≠òÂú®');
        }
        return ResponseData.ok(user);
    }

    //Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
    async updateUser(userInfo: UserUpdateDto, user: User) {
        user = await this.userRepository.findOneBy({
            id: user.id,
        });
        if (!user) {
            // ÂèØ‰ª•ÊäõÂá∫‰∏Ä‰∏™ÂºÇÂ∏∏ÂëäËØâÊ≤°ÊâæÂà∞Ôºå‰∏ÄËà¨Áõ¥Êé•ËøîÂõû
            // throw new HttpException('ËØ•Áî®Êà∑‰∏çÂ≠òÂú®', 204)
            return ResponseData.fail('ËØ•Áî®Êà∑‰∏çÂ≠òÂú®');
        }
        // //updateÂè™Êõ¥Êñ∞Ôºå‰∏çËøîÂõûÈÇ£Êù°Êñ∞userÔºåÈúÄË¶ÅuserÈúÄË¶ÅËá™Â∑±ÊãºÊé•
        // ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÂ¶ÇÊûú‰∏Ä‰∫õÂèÇÊï∞‰∏çÂ≠òÂú®Ôºå‰ªçÁÑ∂ÂèØ‰ª•Êõ¥Êñ∞Âíå‰øùÂ≠òÔºå‰ΩÜÂ§öÂá∫Êù•ÁöÑÂ≠óÊÆµ‰ºöÂ§±Ë¥•ÔºåÁÑ∂ËÄåÊàë‰ª¨‰ºöÊãºÊé•‰∏ä
        //Â¶ÇÊûúÊÉ≥ÈÅøÂÖçÂèØ‰ª•ÊâãÂä®ÊãºÊé•
        // await this.userRepository.update({
        //     id: userId,
        // }, userInfo)
        // return ResponseData.ok({
        //     ...user,
        //     ...userInfo,
        // })

        // //‰πüÂèØ‰ª•Áõ¥Êé•save
        // return ResponseData.ok(
        //     await this.userRepository.save({
        //         ...user,
        //         ...userInfo
        //     })
        // )

        // ÊâãÂä®ËµãÂÄºÔºåÊúÄÁ¥ØÔºå‰ΩÜÊòØÂ≠òÂú®ÈóÆÈ¢òÊúÄÂ∞ë
        if (userInfo.age) user.age = userInfo.age;
        if (userInfo.mobile) user.mobile = userInfo.mobile;
        if (userInfo.nickname) user.nickname = userInfo.nickname;
        if (userInfo.sex) user.sex = userInfo.sex;
        if (userInfo.income) user.income = userInfo.income;
        await this.userRepository.save(user);
        return ResponseData.ok(user);
    }

    //ÊàëÁöÑÊî∂Ëóè
    async getCollects(user: User) {
        user = await this.userRepository.findOne({
            relations: {
                collects: true,
            },
            where: {
                id: user.id,
            },
        });
        if (!user) {
            return ResponseData.fail('ËØ•Áî®Êà∑‰∏çÂ≠òÂú®');
        }
        return ResponseData.ok(user.collects);
    }

    //ÊàëÁöÑÊñáÁ´†
    async getArticles(body: PageDto, user: User) {
        let page = new PageDto(body); //ÂàõÂª∫pagedtoÂØπË±°
        //ÊñáÁ´†ÊØîËæÉÂ§öÔºåËøôÈáåÂèØ‰ª•ÂÅö‰∏Ä‰∏™ÂàÜÈ°µ)ÔºåÈ°∫ÈÅìËé∑Âèñ‰∏Ä‰∏ãÊÄªÊï∞Èáè
        //findAndCountÁªìÊûúÊòØ[articles[], count]ÔºåfindÁöÑÁªìÊûúÊòØarticles[]
        let articles = await this.articleRepository.findAndCount({
            where: {
                userId: user.id,
                isDelete: false,
            },
            order: {
                createTime: 'DESC', //Êàë‰ª¨ÊåâÁÖßÊó∂Èó¥ÈôçÂ∫èÊéíÂàó
            },
            // order: {
            //     //Êàë‰ª¨ÊåâÁÖßÊó∂Èó¥ÈôçÂ∫èÊéíÂàóÔºåÊ¨°Á∫ßÊõ¥Êñ∞Êó∂Èó¥ÂçáÂ∫èÊéíÂàó
            //     createTime: {
            //         direction: 'DESC',
            //         nulls: 'FIRST'
            //     },
            //     updateTime: {
            //         direction: 'ASC',
            //         nulls: 'LAST'
            //     }
            // },
            skip: page.skip, //Ëá™Â∑±ËÆ°ÁÆóÈ°µÁ†ÅÂíåÊï∞Èáè
            take: page.take,
        });
        return ResponseData.pageOk(articles, page);
    }

    //ÊàëÁöÑ‰∏ìÊ†è
    async getFeatures(body: PageDto, user: User) {
        let page = new PageDto(body); //ÂàõÂª∫pagedtoÂØπË±°
        //Áõ¥Êé•Ëé∑ÂèñÂç≥ÂèØÔºå‰πüÂèØ‰ª•ÈÄöËøáuserÁõ¥Êé•Ëé∑ÂèñÔºåÂè™‰∏çÂ§öÂ§öÊü•ËØ¢‰∫ÜÁî®Êà∑Ë°®
        let features = await this.featureRepository.findAndCount({
            where: {
                userId: user.id,
            },
            skip: page.skip, //Ëá™Â∑±ËÆ°ÁÆóÈ°µÁ†ÅÂíåÊï∞Èáè
            take: page.take,
        });
        return ResponseData.pageOk(features, page);
    }

    //ÊàëËÆ¢ÈòÖÁöÑ‰∏ìÊ†è
    async getSubscribeFeature(user: User) {
        //Â§öÂØπÂ§öÔºåËøôÊ†∑Ëé∑ÂèñÊúÄÊñπ‰æøÔºå‰ΩÜ‰∏çÊòØÊúÄÂø´ÁöÑÔºåÂõ†‰∏∫Â§ö‰∫Ü‰∏Ä‰∏™Êü•ÊâæÁî®Êà∑Ë°®ÁöÑËøáÁ®ã
        user = await this.userRepository.findOne({
            where: {
                id: user.id,
            },
            relations: {
                subscribeFeatures: true,
            },
        });
        if (!user) {
            return ResponseData.fail('ËØ•Áî®Êà∑‰∏çÂ≠òÂú®');
        }
        return ResponseData.ok(user.subscribeFeatures);
    }

    //Ê≥®ÈîÄÁî®Êà∑
    async unregister(user: User) {
        let black = await this.blackRepository.findOneBy({
            userId: user.id,
        });
        console.log(user);
        if (!black) {
            this.blackSet.add(user.id);
            black = new BlackList();
            black.userId = user.id;
            await this.blackRepository.save(black);
        }
        return ResponseData.ok('Ê≥®ÈîÄÊàêÂäü');
    }

    //ÊÅ¢Â§çÁî®Êà∑
    async recoverUser(user: User) {
        let black = await this.blackRepository.findOneBy({
            userId: user.id,
        });
        if (black) {
            await this.blackRepository.delete({
                userId: user.id,
            });
            this.blackSet.delete(user.id);
        }
        return ResponseData.ok('ÊÅ¢Â§çÊàêÂäü');
    }

    async initBlackList() {
        //ÂàùÂßãÂåñÈªëÂêçÂçï
        let blackList = await this.blackRepository.find();
        let set = this.blackSet;
        blackList.forEach(function (e) {
            set.add(e.userId);
        });
    }

    async deleteBlackList(userId: number) {
        this.blackSet.delete(userId);
        await this.blackRepository.delete({ userId });
    }

    async transactionOthers() {
        const user = await this.userRepository.findOne({
            where: {
                id: 2,
            },
        });
        user.age = 21;

        const user2 = new User()
        user2.account = 'admin5'
        user2.nickname = 'ÂìàÂìàÂìà'
        user2.age = 25;

        const article = await this.articleRepository.findOne({
            where: {
                id: 17,
            },
        });
        article.desc = 'Á¨ëÂì≠üòÇ';
        try {
            await this.userRepository.manager.transaction(async (manager) => {
                // await manager.save([user, user2, article]); 
                //Ëøô‰∏™ÊòØÈúÄË¶ÅÈ°∫Â∫èÁöÑ
                const user = await manager.save(user2)
                article.userId = user.id
                await manager.save(article)
            });
            //"READ UNCOMMITTED" | "READ COMMITTED" | "REPEATABLE READ" | "SERIALIZABLE"
            await this.userRepository.manager.transaction('SERIALIZABLE', async (manager) => {})
        } catch (err) {
            console.log(err);
            return;
        }
        console.log('ÊàêÂäü‰∫Ü');
    }
}
